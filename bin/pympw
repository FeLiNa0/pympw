#!/usr/bin/env python3
# coding: utf-8
# PYTHON_ARGCOMPLETE_OK
import sys
import threading
import argparse
from time import time as now
import signal
import json
import subprocess
import getpass

import pympw

# Conditional imports
try:
    import pyperclip
except ImportError:
    pyperclip = None

try:
    import argcomplete
except ImportError:
    argcomplete = None

try:
    import colorama
    colorama.init(autoreset=True)
except ImportError:
    colorama = None


ESCAPE_CODES = (0, 1, 2, 94, 47, 91)
RESET, BRIGHT, DIM, FORE, BACK, FORE2 = [
    '' if colorama is None else '\x1b[{}m'.format(n) for n in ESCAPE_CODES]


default_counter = 1
default_type = 'long'
help_cmds = ['?', 'help']
quit_cmds = ['quit']


def copy_to_clipboard(p):
    pyperclip.copy(p)


def clear_clipboard():
    pyperclip.copy('')


def input_format(s):
    return BRIGHT + s + RESET + BRIGHT + ' >' + RESET + ' '


def splitby_completer(**_):
    return ' :/\\,.-'


def read(fname):
    if fname is None:
        return []
    try:
        with open(fname) as f:
            conf = json.load(f)
        if type(conf) != list or (len(conf) > 0 and type(conf[0]) != str):
            raise Exception("failed to parse JSON")
        return conf
    except Exception:
        return []


def site_completer(prefix, a, p, parsed_args):
    return
    """
    return ["reddit.com", "xkcd.org"] + read(parsed_args.store_file)

    return [s for s in read(parsed_args.store_file)
            if s.lower().startswith(prefix.lower())]
    """


def main():
    parser = argparse.ArgumentParser(
        description='CLI to Master Password algorithm v3. ' +
        'Passwords are generated locally, your master password is not sent ' +
        'to any server. http://masterpassword.app')
    parser.add_argument('--name', '-n', type=str, default=None,
                        help='your full name')
    parser.add_argument('--site', '-s', type=str, default=None,
                        help='site name (e.g. linux.org). omit this ' +
                        'argument to start an interactive session.'
                        ).completer = site_completer
    parser.add_argument('--counter', '-c', type=int, default=default_counter,
                        help='positive integer less than 2**31=4294967296')
    types = pympw.template_class_names
    parser.add_argument('--type', '-t', metavar='TYPE', type=str,
                        default=default_type, choices=types,
                        help='password type, one of ' + ', '.join(types))

    parser.add_argument('--store-time', type=int, default=30,
                        help='clear clipboard after this many seconds. ' +
                        'only applicable when --copy is passed')

    parser.add_argument("--quiet", "-q", action="store_true",
                        help="less output")
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="more output. disables --quiet")
    parser.add_argument('--copy', '-y', action='store_true',
                        help='copy password to clipboard')
    parser.add_argument('--hide-pw', '-d', action='store_true',
                        help='never print passwords')
    parser.add_argument('--splitby', '-b', metavar='CHAR', type=str,
                        default=None, help="more efficient interactive " +
                        "session. suggested values: tab, space, or '/'"
                        ).completer = splitby_completer
    parser.add_argument("--keepalive", "-k", action="store_true",
                        help="keep program from timing out by pressing ENTER")
    parser.add_argument('--exit-after', '-e', metavar='T', type=int,
                        default=None, help='script will timeout and close ' +
                        'after this many seconds')
    parser.add_argument("--exit-command", metavar='COMMAND', type=str,
                        default=None, help='run this command if the script ' +
                        'times out')
    parser.add_argument('--no-color', "--strip-ansi", action='store_true',
                        help="suppress colored output in interactive session")

    # read site, counter, and type until quit
    if argcomplete is not None:
        argcomplete.autocomplete(parser)
    args = parser.parse_args(sys.argv[1:])

    if args.hide_pw:
        args.copy = True

    if args.verbose:
        args.quiet = False

    def verbose_print(*_args, **kwargs):
        if not args.quiet:
            print(*_args, **kwargs)

    def output_password(key, site, _type, counter, clear_thread=None):
        password = pympw.site_password(key, site, _type, counter)

        if args.verbose:
            verbose_print(DIM + 'site={}, type={}, counter={}'.format(
                          site, _type, counter))

        # either print password or copy it to clipboard
        if args.copy:
            if pyperclip is None:
                print("unable to copy to clipboard")
            else:
                try:
                    copy_to_clipboard(password)
                    if clear_thread is not None:
                        clear_thread.cancel()
                    t = threading.Timer(args.store_time, clear_clipboard)
                    t.start()
                    return t
                except Exception as e:
                    print(e)
                    print("unable to copy to clipboard")
                    return
                verbose_print('password copied to clipboard')

        if not args.hide_pw:
            print(password)

    # read Name if not passed as argument
    # read password without echo
    courtesy = '' if args.quiet else 'please type your '
    try:
        ask_name = False
        if args.name is None:
            ask_name = True
            args.name = input(input_format(
                FORE + BACK + courtesy + 'full name'))

        master_pw = getpass.getpass(input_format(
            FORE2 + BACK + courtesy + 'password' +
            (' ' if ask_name or not args.quiet else '')))

        # precompute master key
        key = pympw.master_key(args.name, master_pw)

        # Remove any references to the following variables
        del master_pw
        del args.name

    except (EOFError, KeyboardInterrupt, ValueError) as e:
        print(e)
        sys.exit(1)

    # print site password if site name was passed as argument
    if args.site is not None:
        output_password(key, args.site, args.type, args.counter)
        return

    # loop if no site name was given
    if args.exit_after is not None:
        # schedule an ALARM signal to exit the program once args.exit_after
        # seconds pass if keepalive is enabled, another ALARM signal is
        # scheduled
        handler_params = {
            "active": now(),
            "scheduled": now()
        }

        def handler(signum, frame):
            p = handler_params
            active, scheduled = p["active"], p["scheduled"]

            def active_since(t): return now() - (1 + active) < t
            next_delay = max(1, round(active - scheduled))
            # print('ALARM!', now() - active, active_since(args.exit_after),
            #       active, next_delay, active - scheduled)
            if not active_since(args.exit_after):
                raise InterruptedError
            else:
                p["scheduled"] = now()
                signal.alarm(next_delay)
        signal.signal(signal.SIGALRM, handler)
        signal.alarm(args.exit_after)

    courtesy = '' if args.quiet else 'enter '

    def get_input(prompt):
        r = input(input_format(prompt))
        if args.keepalive:
            handler_params["active"] = now()
        return r

    def get_param(name, default):
        x = get_input(courtesy + name + ('' if default ==
                                         '' else ' or ENTER for default=' +
                                         str(default)))
        if x.lower() in help_cmds:
            parser.print_help()
            return default
        if x.lower() in quit_cmds:
            raise EOFError  # TODO hacky
        return x if x != '' else default

    def get_params():
        sb = args.splitby
        if sb is not None and len(sb) > 0 and sb not in ['\n']:
            ins = get_input(
                courtesy + 'site name[{}type[{}counter]]'.format(sb, sb))
            # is this a request for help?
            if ins in help_cmds:
                parser.print_help()
                ins = ''
            if ins in quit_cmds:
                raise EOFError
            # split input by the given split-by character
            ins = ins.split(sb)
            site = ins[0] if len(ins) > 0 else ''
            _type = ins[1] if len(ins) > 1 else args.type
            counter = ins[2] if len(ins) > 2 else args.counter
        else:
            # get site, counter, and password type, or defaults
            site = get_param('site name', '')
            _type = get_param('site type', args.type)
            counter = get_param('site counter', args.counter)
        return site, _type, counter

    try:
        # run a loop that asks for site name, template class (aka password
        # type, and counter
        verbose_print(FORE + BACK + "Welcome to Master Password")
        clear_thread = None
        while True:
            # read parameters for generating a password
            site, _type, counter = get_params()

            # check all parameters
            # nag until valid parameters are given
            if site == '':
                verbose_print('please enter a valid site name')
                continue

            try:
                counter = int(counter)
                if counter < 1:
                    raise ValueError
            except ValueError:
                verbose_print("please enter a positive counter")
                continue

            if _type not in pympw.template_classes:
                verbose_print(
                    "please enter a valid template class/password type")
                continue

            clear_thread = output_password(
                key, site, _type, counter, clear_thread)
    except (EOFError, KeyboardInterrupt):
        pass
    except InterruptedError:
        # run command after timeout
        verbose_print(args.exit_after, 'second timeout reached')
        if args.exit_command is not None:
            subprocess.call(args.exit_command, shell=True)
    finally:
        if hasattr(clear_thread, 'cancel'):
            clear_thread.cancel()
        print(DIM + 'bye')


if __name__ == '__main__':
    main()
